var __extends=this.__extends||function(n,t){function r(){this.constructor=n}for(var i in t)t.hasOwnProperty(i)&&(n[i]=t[i]);r.prototype=t.prototype;n.prototype=new r},Rule=function(n){function t(){n.apply(this,arguments)}return __extends(t,n),t.prototype.apply=function(n){return this.applyWithWalker(new UnusedExpressionWalker(n,this.getOptions()))},t.FAILURE_STRING="expected an assignment or function call",t}(Lint.Rules.AbstractRule),UnusedExpressionWalker;exports.Rule=Rule;UnusedExpressionWalker=function(n){function t(t,i){n.call(this,t,i);this.expressionIsUnused=!0}return __extends(t,n),t.prototype.visitExpressionStatement=function(t){if(this.expressionIsUnused=!0,n.prototype.visitExpressionStatement.call(this,t),this.expressionIsUnused){if(t.expression.kind===7){var i=t.expression.getText();if(i==='"use strict"'||i==="'use strict'")return}else if(t.expression.kind===152)return;this.addFailure(this.createFailure(t.getStart(),t.getWidth(),Rule.FAILURE_STRING))}},t.prototype.visitBinaryExpression=function(t){n.prototype.visitBinaryExpression.call(this,t);switch(t.operator){case 51:case 52:case 53:case 54:case 55:case 56:case 60:case 62:case 61:case 57:case 58:case 59:this.expressionIsUnused=!1;break;default:this.expressionIsUnused=!0}},t.prototype.visitPrefixUnaryExpression=function(t){n.prototype.visitPrefixUnaryExpression.call(this,t);switch(t.operator){case 37:case 38:this.expressionIsUnused=!1;break;default:this.expressionIsUnused=!0}},t.prototype.visitPostfixUnaryExpression=function(t){n.prototype.visitPostfixUnaryExpression.call(this,t);this.expressionIsUnused=!1},t.prototype.visitBlock=function(t){n.prototype.visitBlock.call(this,t);this.expressionIsUnused=!0},t.prototype.visitArrowFunction=function(t){n.prototype.visitArrowFunction.call(this,t);this.expressionIsUnused=!0},t.prototype.visitCallExpression=function(t){n.prototype.visitCallExpression.call(this,t);this.expressionIsUnused=!1},t.prototype.visitConditionalExpression=function(n){var t,i;this.visitNode(n.condition);this.expressionIsUnused=!0;this.visitNode(n.whenTrue);t=this.expressionIsUnused;this.expressionIsUnused=!0;this.visitNode(n.whenFalse);i=this.expressionIsUnused;this.expressionIsUnused=t||i},t}(Lint.RuleWalker)