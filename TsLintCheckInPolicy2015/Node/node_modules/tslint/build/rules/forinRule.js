var __extends=this.__extends||function(n,t){function r(){this.constructor=n}for(var i in t)t.hasOwnProperty(i)&&(n[i]=t[i]);r.prototype=t.prototype;n.prototype=new r},Rule=function(n){function t(){n.apply(this,arguments)}return __extends(t,n),t.prototype.apply=function(n){return this.applyWithWalker(new ForInWalker(n,this.getOptions()))},t.FAILURE_STRING="for (... in ...) statements must be filtered with an if statement",t}(Lint.Rules.AbstractRule),ForInWalker;exports.Rule=Rule;ForInWalker=function(n){function t(){n.apply(this,arguments)}return __extends(t,n),t.prototype.visitForInStatement=function(t){this.handleForInStatement(t);n.prototype.visitForInStatement.call(this,t)},t.prototype.handleForInStatement=function(n){var o=n.statement,r=n.statement.kind,u,t,i,f,e;if(r!==167){if(r===163&&(u=o,t=u.statements,t.length>=1&&(i=t[0],i.kind===167))){if(t.length===1)return;if(f=i.thenStatement,this.nodeIsContinue(f))return}e=this.createFailure(n.getStart(),n.getWidth(),Rule.FAILURE_STRING);this.addFailure(e)}},t.prototype.nodeIsContinue=function(n){var i=n.kind,t;return i===172?!0:i===163&&(t=n.statements,t.length===1&&t[0].kind===172)?!0:!1},t}(Lint.RuleWalker)