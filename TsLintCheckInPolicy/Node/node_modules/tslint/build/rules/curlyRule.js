var __extends=this.__extends||function(n,t){function r(){this.constructor=n}for(var i in t)t.hasOwnProperty(i)&&(n[i]=t[i]);r.prototype=t.prototype;n.prototype=new r},Rule=function(n){function t(){n.apply(this,arguments)}return __extends(t,n),t.prototype.apply=function(n){return this.applyWithWalker(new CurlyWalker(n,this.getOptions()))},t.DO_FAILURE_STRING="do statements must be braced",t.ELSE_FAILURE_STRING="else statements must be braced",t.FOR_FAILURE_STRING="for statements must be braced",t.IF_FAILURE_STRING="if statements must be braced",t.WHILE_FAILURE_STRING="while statements must be braced",t}(Lint.Rules.AbstractRule),CurlyWalker;exports.Rule=Rule;CurlyWalker=function(n){function t(){n.apply(this,arguments)}return __extends(t,n),t.prototype.visitForInStatement=function(t){this.isStatementBraced(t.statement)||this.addFailureForNode(t,Rule.FOR_FAILURE_STRING);n.prototype.visitForInStatement.call(this,t)},t.prototype.visitForStatement=function(t){this.isStatementBraced(t.statement)||this.addFailureForNode(t,Rule.FOR_FAILURE_STRING);n.prototype.visitForStatement.call(this,t)},t.prototype.visitIfStatement=function(t){if(this.isStatementBraced(t.thenStatement)||this.addFailure(this.createFailure(t.getStart(),t.thenStatement.getEnd()-t.getStart(),Rule.IF_FAILURE_STRING)),t.elseStatement!=null&&t.elseStatement.kind!==167&&!this.isStatementBraced(t.elseStatement)){var i=t.getChildren().filter(function(n){return n.kind===74})[0];this.addFailure(this.createFailure(i.getStart(),t.elseStatement.getEnd()-i.getStart(),Rule.ELSE_FAILURE_STRING))}n.prototype.visitIfStatement.call(this,t)},t.prototype.visitDoStatement=function(t){this.isStatementBraced(t.statement)||this.addFailureForNode(t,Rule.DO_FAILURE_STRING);n.prototype.visitDoStatement.call(this,t)},t.prototype.visitWhileStatement=function(t){this.isStatementBraced(t.statement)||this.addFailureForNode(t,Rule.WHILE_FAILURE_STRING);n.prototype.visitWhileStatement.call(this,t)},t.prototype.isStatementBraced=function(n){return n.kind===163?!0:!1},t.prototype.addFailureForNode=function(n,t){this.addFailure(this.createFailure(n.getStart(),n.getWidth(),t))},t}(Lint.RuleWalker)